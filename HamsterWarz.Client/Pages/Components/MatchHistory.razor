@inject IRequestService httpService;
@page "/history"

@if (AllRegisteredHamsterMatches == null)
{
    <h4>...Loading</h4>
}
else
{
    <RadzenGrid AllowPaging="true"
            AllowFiltering="true"
            AllowSorting="true"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            PageSize="10"
            Data="@AllRegisteredHamsterMatches"
            TItem="@MatchResultDTO"
            ColumnWidth="300px">

        <Columns>
            <RadzenGridColumn TItem="@MatchResultDTO" Property="MatchId" Title="Match Id"></RadzenGridColumn>
            <RadzenGridColumn TItem="@MatchResultDTO" Property="WinningHamster.Name" Title="Winners"></RadzenGridColumn>
            <RadzenGridColumn TItem="@MatchResultDTO" Property="LosingHamster.Name" Title="Losers"></RadzenGridColumn>
            <RadzenGridColumn TItem="@MatchResultDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="result">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Click="() => DeleteRow(result.MatchId)">Delete</RadzenButton>
                </Template>
            </RadzenGridColumn>
        </Columns>

    </RadzenGrid>
}


@code {
    private IEnumerable<MatchResultDTO>? AllRegisteredHamsterMatches { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AllRegisteredHamsterMatches = await httpService.GetAllRegisteredMatches();
    }
    private async Task DeleteRow(int id) 
    {
        //make service -> api call
        //TODO: fungerar, men kolla så att man kan få sidan att uppdatera real time istället för att göra en till api call?
        //Ett sätt hade kanske kunnat vara att ha AllRegisteredHamsterMatches som en Lista istället, och filtrera
        //den på client sidan: "AllRegisteredHamsterMatches.RemoveAll(x => x.MatchId == id);"
        //och sedan kalla på statehaschanged?
        await httpService.DeleteMatchRow(id);
        AllRegisteredHamsterMatches = await httpService.GetAllRegisteredMatches();
        this.StateHasChanged(); 
    }
}
