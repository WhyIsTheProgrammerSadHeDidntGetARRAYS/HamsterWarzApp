@using HamsterWarz.Client.Services
@using HamsterWarz.Entities.Models
@inject IRequestService service
@page "/gallery"


@if (Hamsters == null)
{
    <h4>...Loading</h4>
}
else
{
    <div class="container">
        <a class="btn btn-outline-dark" href="/addhamster">Add new Hamster</a> @*TODO lägg till så att man navigerar till addhamster page*@
        <div class="row ">
            @foreach (var item in Hamsters)
            {
                <HamsterCard Hamster="@item">
                    <ChildContent>
                        <h5 class="card-title">@item.Name</h5>
                        <h6><b>Interests:</b> @item.Loves</h6>
                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-sm btn-outline-dark" @onclick="(() => {GetId(item.Id); OpenDialog();})">Hamsters defeated</button>
                        </div>
                    </ChildContent>
                </HamsterCard>
            }
        </div>
    </div>
    @if (DialogOpen)
    {
        <ModalTest Title="Hamstertest's Deafeats'" OnClose="@CloseDialog" Id="@Id"></ModalTest>
    }
}


@code {
    private IEnumerable<Hamster>? Hamsters { get; set; }
    private Hamster? HamsterStatistics { get; set; }

    int Id { get; set; }
    private void GetId(int id)
    {
        Id = id;
    }

    private bool DialogOpen { get; set; }

    private void OpenDialog()
    {
        DialogOpen = true;
        StateHasChanged();
    }
    private void CloseDialog()
    {
        DialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Hamsters = await service.GetAllHamstersAsync();
    }
    private async void LoadHamsterStatistics(int id)
    {
        //TODO: fixa så att när man klickar på en hamster i galleriet så ska ett boostrap table visas med matchhistorik på hamstrar denne besegrat
        //LosingHamsters = await service.GetHamsterMatchData(id);
    }


}